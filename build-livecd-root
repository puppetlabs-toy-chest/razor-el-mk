#! /bin/bash

# the portion of building a livecd that needs to be run as root
# run this after running build-livecd
#
# The temp dir in which things happen is by default deleted when this
# script ends, unless an error happens or the KEEP_TMPDIR variable is set

function cleanup() {
    if [ -n "$KEEP_TMPDIR" ]; then
        echo "Not removing tmpdir $tmpdir"
    else
        [ -d $tmpdir ] && rm -rf $tmpdir
    fi
}

if [ $(id -u) != 0 ]; then
  echo "Please run this script as root"
  exit 1
fi

trap cleanup EXIT

resultdir=$PWD
srcdir=$(realpath $(dirname $0))
tmpdir=$(mktemp -d /var/tmp/build-livecd-XXXXXX)

cd $srcdir
last_tag=$(git describe)

cd $tmpdir
echo Working in directory $tmpdir

echo "* Running livecd-creator"
livecd-creator -v --cache /var/cache/microkernel --config $srcdir/microkernel.ks -f microkernel || KEEP_TMPDIR=yes

echo "* Converting to initrd"
livecd-iso-to-pxeboot $tmpdir/microkernel.iso || KEEP_TMPDIR=yes

## Work around dracut not configuring udev correctly for the loopback kernel module
## See: http://git.kernel.org/cgit/boot/dracut/dracut.git/commit/?id=ba9368fa4fedda0f72d84f910d01d7da201405a3
mkdir $tmpdir/initrd_root
# Unpack the first archive, which is the initramfs.  The ISO is second.
echo "* Unpacking initrd0.img"
gzip -d -c tftpboot/initrd0.img | (cd $tmpdir/initrd_root; cpio -id)
# Apply the dracut patch
echo "* Applying dracut initrd loop patch"
(cd "$tmpdir"/initrd_root; patch -p0) <<-'DRACUTPATCH'
--- lib/dracut/hooks/pre-udev/30-dmsquash-liveiso-genrules.sh.bak	2014-03-18 20:16:01.472869714 -0700
+++ lib/dracut/hooks/pre-udev/30-dmsquash-liveiso-genrules.sh	2014-03-18 20:16:49.779746408 -0700
@@ -4,5 +4,5 @@
 if [ "${root%%:*}" = "liveiso" ]; then
     {
-        printf 'KERNEL=="loop0", RUN+="/sbin/initqueue --settled --onetime --unique /sbin/dmsquash-live-root `/sbin/losetup -f --show %s`"\n' \
+        printf 'KERNEL=="loop-control", RUN+="/sbin/initqueue --settled --onetime --unique /sbin/dmsquash-live-root `/sbin/losetup -f --show %s`"\n' \
             ${root#liveiso:}
     } >> /etc/udev/rules.d/99-liveiso-mount.rules
DRACUTPATCH
# rebuild the PXE initrd
echo "* Repacking patched initrd"
( cd "$tmpdir/initrd_root";
  find . \
  | cpio --create --format='newc' \
  | gzip -c -9 ) \
    > "$tmpdir"/initrd.gz
# Append the ISO image to the initrd image.
echo "* Rebuilding tftpboot/initrd0.img"
( cd "$tmpdir" && echo "microkernel.iso" | cpio -H newc --quiet -L -o ) |
  gzip -9 |
  cat "$tmpdir"/initrd.gz - > tftpboot/initrd0.img

echo "* Building tarball"
mkdir microkernel
mv tftpboot/initrd0.img tftpboot/vmlinuz0 microkernel || KEEP_TMPDIR=yes
cd microkernel
cat > README <<EOF
This is a Microkernel for the new Razor
(https://github.com/puppetlabs/razor-server)

The microkernel was built from https://github.com/puppetlabs/razor-el-mk
at commit $last_tag

For instructions on how to set things up, read
https://github.com/puppetlabs/razor-server/wiki/Installation

To verify the kernel and initrd in this tar, run

  sha256sum -c SHA256SUM

The SHA256SUM file is signed with my public key (FC6E8A22). You can verify it
by running

  gpg --verify SHA256SUM.sig
EOF

sha256sum initrd0.img vmlinuz0 > SHA256SUM

cd ..
tarball=$srcdir/pkg/microkernel-${last_tag#release-}.tar
tar cf $tarball microkernel/
chown --reference $srcdir/build-livecd $tarball

echo "* Done"
echo "The microkernel is in $tarball"
